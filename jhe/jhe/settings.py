import logging
import os
from dataclasses import dataclass
from pathlib import Path, PosixPath
from urllib.parse import urlparse

from django.core.management.utils import get_random_secret_key
from dotenv import load_dotenv

JHE_VERSION = "v0.0.7"

"""
Django settings for jhe project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""


# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")
if SECRET_KEY is None:
    logging.warning(
        "SECRET_KEY unset, using a randomly generated SECRET_KEY; this will not work with more than one worker."
    )
    SECRET_KEY = get_random_secret_key()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

SITE_TITLE = os.getenv("SITE_TITLE", "")
SITE_URL = os.getenv("SITE_URL", "http://localhost:8000")
CH_INVITATION_LINK_PREFIX = os.getenv("CH_INVITATION_LINK_PREFIX", "")
CH_INVITATION_LINK_EXCLUDE_HOST = os.getenv("CH_INVITATION_LINK_EXCLUDE_HOST", "")
OIDC_CLIENT_AUTHORITY = SITE_URL + os.getenv("OIDC_CLIENT_AUTHORITY_PATH", "")
OIDC_CLIENT_ID = os.getenv("OIDC_CLIENT_ID", "")  # TBD: Multi-tenancy lookup based on client entry URI
OIDC_CLIENT_REDIRECT_URI = SITE_URL + os.getenv("OIDC_CLIENT_REDIRECT_URI_PATH", "")

ALLOWED_HOSTS = [urlparse(SITE_URL).hostname]

CSRF_TRUSTED_ORIGINS = [SITE_URL]

# https://stackoverflow.com/questions/62047354/build-absolute-uri-with-https-behind-reverse-proxy
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

INSTALLED_APPS = [
    "core",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Required for allauth
    "allauth",
    "allauth.account",
    "oauth2_provider",
    "rest_framework",
    "drf_spectacular",
    "django_saml2_auth",
]

# Required for allauth
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

ACCOUNT_LOGIN_METHODS = ["email"]
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = "/email_auth/email/"
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1

REST_FRAMEWORK = {
    # uncomment if you need to revert to the default pagination class
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    # 'DEFAULT_PAGINATION_CLASS': 'core.pagination.CustomPageNumberPagination',
    "PAGE_SIZE": 1000,
    "DEFAULT_AUTHENTICATION_CLASSES": ("oauth2_provider.contrib.rest_framework.OAuth2Authentication",),
    "DEFAULT_RENDERER_CLASSES": (
        "djangorestframework_camel_case.render.CamelCaseJSONRenderer",
        "djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer",
    ),
    "DEFAULT_PARSER_CLASSES": (
        "djangorestframework_camel_case.parser.CamelCaseFormParser",
        "djangorestframework_camel_case.parser.CamelCaseMultiPartParser",
        "djangorestframework_camel_case.parser.CamelCaseJSONParser",
    ),
    "JSON_UNDERSCOREIZE": {
        "ignore_keys": (
            "response_type",
            "client_id",
            "redirect_uri",
            "code_challenge",
            "code_challenge_method",
            "grant_type",
            "code_verifier",
        ),
        "ignore_fields": ("value_attachment_data",),
    },
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

MIDDLEWARE = [
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "djangorestframework_camel_case.middleware.CamelCaseMiddleWare",
]

ROOT_URLCONF = "jhe.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "core.context_processors.constants",
            ],
        },
    },
]

WSGI_APPLICATION = "jhe.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases


DB_USER_SECRET_NAME = os.environ.get("DATABASE_USER_SECRET_NAME", "DATABASE_USER")
DB_PASSWORD_SECRET_NAME = os.environ.get("DATABASE_PASSWORD_SECRET_NAME", "DATABASE_PASSWORD")
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
    }
}

# default django logging scheme: https://docs.djangoproject.com/en/5.2/ref/logging/#default-logging-configuration
# https://docs.djangoproject.com/en/5.2/topics/logging
# also see: https://docs.djangoproject.com/en/5.2/howto/error-reporting/#filtering-error-reports
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "stream": "ext://sys.stdout",
        },
    },
    "root": {
        "handlers": ["console"],
        # makes it required to set the log level in the environment variable DJANGO_LOG_LEVEL
        "level": os.getenv("DJANGO_LOG_LEVEL"),
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

# https://django-oauth-toolkit.readthedocs.io/en/latest/getting_started.html
AUTH_USER_MODEL = "core.JheUser"
REGISTRATION_INVITE_CODE = os.getenv("REGISTRATION_INVITE_CODE")

# LOGIN_URL = '/admin/login/' for staff accounts
LOGIN_URL = "/accounts/login/"
OAUTH2_PROVIDER = {
    "OIDC_ENABLED": True,
    "OIDC_RSA_PRIVATE_KEY": os.getenv("OIDC_RSA_PRIVATE_KEY"),
    "SCOPES": {"openid": "OpenID Connect scope"},
    "ACCESS_TOKEN_EXPIRE_SECONDS": 1209600,  # 2 weeks
}

PATIENT_AUTHORIZATION_CODE_EXPIRE_SECONDS = 1209600  # 2 weeks
PATIENT_AUTHORIZATION_CODE_CHALLENGE = os.getenv("PATIENT_AUTHORIZATION_CODE_CHALLENGE")
PATIENT_AUTHORIZATION_CODE_VERIFIER = os.getenv("PATIENT_AUTHORIZATION_CODE_VERIFIER")

X_FRAME_OPTIONS = "SAMEORIGIN"

EMAIL_HOST = os.getenv("SMTP_HOST")
EMAIL_HOST_USER = os.getenv("SMTP_USER")
EMAIL_HOST_PASSWORD = os.getenv("SMTP_PASSWORD")
EMAIL_PORT = int(os.getenv("SMTP_PORT", 587))
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = "support@jhe.org"

EMAIL_BACKEND = (
    "django.core.mail.backends.console.EmailBackend"
    if not EMAIL_HOST
    else "django.core.mail.backends.smtp.EmailBackend"
)

CODE_VERIFIER = "N0hHRVk2WDNCUUFPQTIwVDNZWEpFSjI4UElNV1pSTlpRUFBXNTEzU0QzRTMzRE85WDFWTzU2WU9ESw=="

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

SAML2_ENABLED = int(os.getenv("SAML2_ENABLED", 0))
SSO_VALID_DOMAINS = os.getenv("SSO_VALID_DOMAINS", "").split(",")
SAML2_AUTH = {
    "METADATA_AUTO_CONF_URL": os.getenv("IDENTITY_PROVIDER_METADATA_URL"),
    "ASSERTION_URL": SITE_URL,
    "ENTITY_ID": f"{SITE_URL}/sso/acs/",
    # Attributes according to the Identity Provider.
    "ATTRIBUTES_MAP": {
        "email": "email",
        "first_name": "firstName",
        "last_name": "lastName",
    },
    "CREATE_USER": True,
    "AUTHN_REQUESTS_SIGNED": not DEBUG,
    "TOKEN_REQUIRED": not DEBUG,
    "SIGN_REQUEST": not DEBUG,
    # Landing page after login
    "DEFAULT_NEXT_URL": "/portal/organizations?",
    "ALLOWED_REDIRECT_HOSTS": ALLOWED_HOSTS,
    "DEBUG": DEBUG,
    "LOGGING": {
        "version": 1,
        "formatters": {
            "simple": {
                "format": "[%(asctime)s] [%(levelname)s] [%(name)s.%(funcName)s] %(message)s",
            },
        },
        "handlers": {
            "stdout": {
                "class": "logging.StreamHandler",
                "stream": "ext://sys.stdout",
                "level": "DEBUG",
                "formatter": "simple",
            },
        },
        "loggers": {
            "saml2": {"level": "DEBUG"},
        },
        "root": {
            "level": "DEBUG",
            "handlers": [
                "stdout",
            ],
        },
    },
}

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

USE_I18N = True

USE_TZ = True

TIME_ZONE = os.getenv("TIME_ZONE", "UTC")

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, "core/static/")]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_STORAGE = "whitenoise.storage.CompressedStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Spectacular schema
SPECTACULAR_SETTINGS = {
    "TITLE": "JupyterHealth Exchange",
    "DESCRIPTION": "Django app sharing user-consented medical data via web REST FHIR.",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
}


@dataclass
class DataDirPath:
    data_dir: PosixPath = Path(BASE_DIR) / "data"
    schemas_metadata: PosixPath = data_dir / "omh/json-schemas/metadata"
    schemas_data: PosixPath = data_dir / "omh/json-schemas/data"
    schemas_utility: PosixPath = data_dir / "omh/json-schemas/utility"
    examples_data_point: PosixPath = data_dir / "omh/examples/data-points"


DATA_DIR_PATH = DataDirPath()
